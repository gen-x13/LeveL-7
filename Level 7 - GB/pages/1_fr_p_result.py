# -*- coding: utf-8 -*-
"""
Created on Wed Oct  1 17:28:45 2025

@author: @genxcode - Form with Cluster
"""

# Streamlit
import streamlit as st
import streamlit.components.v1 as components
from streamlit_option_menu import option_menu
from streamlit_extras.switch_page_button import switch_page

# Badges
from streamlit_extras.badges import badge

# Pandas for the df type
import pandas as pd

# Model for Clustering
from sklearn.cluster import KMeans

# False data for clustering
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs # using "blobs" for cluster

# Display the results
import plotly.express as px

# Session State
if "visibility" not in st.session_state:
    st.session_state.visibility = "visible"
if "disabled" not in st.session_state:
    st.session_state.disabled = False
if "horizontal" not in st.session_state:
    st.session_state.horizontal = True
if "score" not in st.session_state:
    st.session_state.score = 0
if "bar" not in st.session_state:
    st.session_state.bar = 0
if "progress_value" not in st.session_state:
    st.session_state.progress_value = 0

# Page Icon, side bar collpase
st.set_page_config(page_title="Form", page_icon="ðŸ“‹", 
                   initial_sidebar_state="collapsed")

# Disable sidebar
st.markdown("""
            <style>
            [data-testid="stSidebar"] {
                display: none
            }

            [data-testid="collapsedControl"] {
                display: none
            }
            </style>
            """, unsafe_allow_html=True)
    


# Storing the data in JSON


# Clustering all the data


# Result Part
st.title("Spectrum App Test : RÃ©sultats")
st.header("Vos rÃ©sultats :")

# Visual Results part

# Samples as blobs 
X, y = make_blobs(
    n_samples=1000,
    centers=[[-30, -30], [30, 30], [-30, 30], [30, -30]], # Coordonates
    cluster_std=5,
    random_state=1
)

# KMEANS
model = KMeans(n_clusters=4)

# Training
model.fit(X)

# Prediction
pred = model.predict(X)

# Turning it into a dataframe : scatter can't build graphic without y
df = pd.DataFrame(X, columns=["x", "y"])
df["pred"] = pred

# Figure of the clusters
fig2 = px.scatter(df, x="x", y="y", color=df["pred"].astype(str)) # int -> str

fig2.update_xaxes(
    tickvals=[-50, -40, -30, -20, -10, 0, 10, 20, 30, 40, 50],
    ticktext=["-50", "-40", "-30", "-20", "-10", "0", "10", "20", "30", "40", "50"]
)

fig2.update_yaxes(
    tickvals=[-50, -40, -30, -20, -10, 0, 10, 20, 30, 40, 50],
    ticktext=["-50", "-40", "-30", "-20", "-10", "0", "10", "20", "30", "40", "50"]
)

if st.session_state.score < 25:
    
    fig2.add_scatter(x=[-30],
                    y=[30],
                    marker=dict(
                        color='black',
                        size=10
                    ),
                   name='Multitask Mind User Type') 

elif 25 < st.session_state.score < 49:
    
    fig2.add_scatter(x=[30],
                    y=[-30],
                    marker=dict(
                        color='black',
                        size=10
                    ),
                   name='Early Adopters User type')

elif 50 < st.session_state.score < 74:
    
    fig2.add_scatter(x=[30],
                    y=[30],
                    marker=dict(
                        color='black',
                        size=10
                    ),
                   name='Delegator User Type')

elif 75 < st.session_state.score < 100:
    
    fig2.add_scatter(x=[-30],
                    y=[-30],
                    marker=dict(
                        color='black',
                        size=10
                    ),
                   name='Data Sovereign User Type')
    
st.plotly_chart(fig2)

# Results Written Part


st.subheader(f"Vous avez un score de {st.session_state.score} %")

if st.session_state.score < 25:
    
    st.subheader("Multitask Mind User Type : Utilisateur Type Â« Esprit MultitÃ¢che Â»")
    
    st.markdown("En tant que multitÃ¢che vous avez tendance Ã  vous disperser.")
    st.markdown("Vous Ãªtes trÃ¨s probablement multi-passionnÃ© aussi.")
    st.markdown("Nous avons donc une sÃ©rie de sites / applications Ã  vous proposer :")
    
    st.markdown("âš« https://mindscout.net/")
    st.markdown("âš« https://mindscout.net/") # replacement of Notion
    st.markdown("âš« https://www.notion.com/")
    st.markdown("âš« https://obsidian.md/")
    

elif 25 < st.session_state.score < 49:
    
    st.subheader("Early Adopters User Type : Utilisateur Type Â« Adopteurs PrÃ©coces Â»")
    
    st.markdown("En tant qu'adopteur prÃ©coce vous apprÃ©ciez tester les nouveautÃ©s avant tout le monde et les partager.")
    st.markdown("Vous Ãªtes aussi ce qu'on appelle un beta tester, testant mÃªme des prototypes avant le modÃ¨le fini.")
    st.markdown("Nous avons donc une sÃ©rie de sites / applications Ã  vous recommander :")
    
    st.markdown("âš« https://www.producthunt.com/")
    st.markdown("âš« https://betalist.com/")
    st.markdown("âš« https://www.indiehackers.com/")
    st.markdown("âš« https://lookerstudio.google.com/")
    

elif 50 < st.session_state.score < 74:
    
    st.markdown("Delegator User Type : Utilisateur Type Â« DÃ©lÃ©guant Â»")
    
    st.markdown("En tant que dÃ©lÃ©gant vous apprÃ©ciez attribuer vos tÃ¢ches plutÃ´t que de les exÃ©cuter vous-mÃªmes.")
    st.markdown("Vous prÃ©fÃ©rez avoir du sur-mesure, payer pour des professionnels et ne pas avoir Ã  apprendre ce qui vous ferait perdre du temps.")
    st.markdown("Nous avons donc cette sÃ©rie de sites / applications Ã  prÃ©senter Ã  votre type de profil :")
    
    st.markdown("âš« https://freelancer.com/")
    st.markdown("âš« https://www.upwork.com/")

elif 75 < st.session_state.score < 100:
    
    st.markdown("Data Sovereign User Type : Utilisateur Type Â« Souverain des donnÃ©es Â»")
    
    st.markdown("En tant que souverain des donnÃ©es vous aimez l'autonomie, la simplicitÃ©, et vous voulez contrÃ´ler vos donnÃ©es.")
    st.markdown("Vous Ãªtes ouverts au monde de la tech et mÃ©fiant concernant l'utilisation de vos donnÃ©es sensibles par des services en ligne.")
    st.markdown("Nous avons donc une sÃ©rie de sites / applications Ã  faire dÃ©couvrir Ã  votre catÃ©gorie :")
    
    st.markdown("âš« https://live-report-generator.streamlit.app/")
    st.markdown("âš« https://nextcloud.com/")
    st.markdown("âš« https://plausible.io/")


# Notification for the user
def notif_score():
    msg = st.toast(f"Vos rÃ©sultats !")
 

if st.button("Retour Ã  la page principal"):
    st.session_state.score = 0
    st.switch_page("pages/1_fr_intro.py")